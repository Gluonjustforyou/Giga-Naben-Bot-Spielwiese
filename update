import discord
from datetime import datetime, timedelta
from discord.ext import commands
import sqlite3

intents = discord.Intents.all()
intents.typing = False
intents.presences = False

bot = commands.Bot(command_prefix='!', intents=intents)

connection = sqlite3.connect('database.db')
cursor = connection.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS warnings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        reason TEXT
    )
''')

@bot.command()
async def hilfe(ctx):
    embed = discord.Embed(title='Hilfe-Men√º',
                          description='Hier sind einige verf√ºgbare Befehle:',
                          color=discord.Color.blue())
    embed.add_field(name='1. !nachricht_mit_reaktion', value='Erstellt eine Nachricht mit einer Reaktion.', inline=False)
    embed.add_field(name='2. !ban', value='Bannt einen Benutzer.', inline=False)
    embed.add_field(name='3. !kick', value='Kickt einen Benutzer.', inline=False)
    embed.add_field(name='4. Hilfe ben√∂tigt?', value='Wende dich an das h√∂here Team oder die Entwickler.', inline=False)

    await ctx.send(embed=embed)

@bot.event
async def on_ready():
    print(f'Eingeloggt als {bot.user.name} ({bot.user.id})')

@bot.command()
async def nachricht_mit_reaktion(ctx):
    nachricht = await ctx.send('Testnachricht')
    await nachricht.add_reaction('üëç')

@bot.event
async def on_raw_reaction_add(payload):
    if payload.user_id == bot.user.id:
        return

    nachricht_id = payload.message_id
    reaktion = payload.emoji.name
    rolle_id = 1117211428277997578

    if reaktion == 'üëç':
        guild = bot.get_guild(payload.guild_id)
        rolle = guild.get_role(rolle_id)
        member = guild.get_member(payload.user_id)

        if member is not None and rolle is not None:
            await member.add_roles(rolle)
            print(f'Benutzer {member.name} hat die Rolle {rolle.name} erhalten!')

@bot.command()
async def ban(ctx, member: discord.Member, duration: int, *, reason: str):
    ban_duration = timedelta(hours=duration)
    ban_start = datetime.now()
    ban_end = ban_start + ban_duration

    await member.ban(reason=reason)

    cursor.execute('INSERT INTO warnings (user_id, reason) VALUES (?, ?)', (member.id, reason))
    connection.commit()

    embed = discord.Embed(title='Benutzer-Bann',
                          description=f'{member.mention} wurde gebannt.',
                          color=discord.Color.red())
    embed.add_field(name='Dauer', value=f'{duration} Stunden')
    embed.add_field(name='Grund', value=reason)
    embed.add_field(name='Ban-Start', value=ban_start.strftime('%Y-%m-%d %H:%M:%S'))
    embed.add_field(name='Ban-Ende', value=ban_end.strftime('%Y-%m-%d %H:%M:%S'))

    await ctx.send(embed=embed)

@bot.command()
async def kick(ctx, member: discord.Member, *, reason: str):
    await member.kick(reason=reason)

    embed = discord.Embed(title='Benutzer-Kick',
                          description=f'{member.mention} wurde gekickt.',
                          color=discord.Color.red())
    embed.add_field(name='Grund', value=reason)

    await ctx.send(embed=embed)

@bot.command()
async def warn(ctx, member: discord.Member, *, reason: str):
    cursor.execute('INSERT INTO warnings (user_id, reason) VALUES (?, ?)', (member.id, reason))
    connection.commit()

    embed = discord.Embed(title='Benutzer-Warnung',
                          description=f'{member.mention} wurde gewarnt.',
                          color=discord.Color.orange())
    embed.add_field(name='Grund', value=reason)

    warning_count = get_warning_count(member.id)
    embed.add_field(name='Anzahl der Warnungen', value=warning_count)

    await ctx.send(embed=embed)

def get_warning_count(user_id):
    cursor.execute('SELECT COUNT(*) FROM warnings WHERE user_id = ?', (user_id,))
    count = cursor.fetchone()[0]
    return count

bot.run('Token')

connection.close()
